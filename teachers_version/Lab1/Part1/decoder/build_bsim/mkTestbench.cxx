/*
 * Generated by Bluespec Compiler, version 2023.01-6-g034050db (build 034050db)
 * 
 * On Thu Jun  8 01:01:22 PDT 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkTestbench.h"


/* String declarations */
static std::string const __str_literal_1("\nDecoding instruction 0x%0h", 27u);
static std::string const __str_literal_5("Decode mismatch, exiting ... ", 29u);
static std::string const __str_literal_2("Decoded Op No. %0d, %0d was expected", 36u);
static std::string const __str_literal_6("Decoded Rd, Rs1, Imm: %0d %0d %0d, %0d %0d %0d was expected",
					 59u);
static std::string const __str_literal_4("Decoded Rd, Rs1, Rs2: %0d %0d %0d, %0d %0d %0d was expected",
					 59u);
static std::string const __str_literal_3("Opcode mismatch, exiting ... ", 29u);


/* Constructor */
MOD_mkTestbench::MOD_mkTestbench(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_de_insn(simHdl, "de_insn", this, 32u, 1u, (tUInt8)0u),
    INST_de_rd(simHdl, "de_rd", this, 32u, 0u, (tUInt8)0u),
    INST_de_rs1(simHdl, "de_rs1", this, 32u, 0u, (tUInt8)0u),
    INST_de_rs2(simHdl, "de_rs2", this, 32u, 0u, (tUInt8)0u),
    INST_decoder(simHdl, "decoder", this),
    INST_rg_insn(simHdl, "rg_insn", this, 32u, 51u, (tUInt8)0u),
    INST_rg_testing_phase(simHdl, "rg_testing_phase", this, 32u, 1u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 8u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTestbench::init_symbols_0()
{
  init_symbol(&symbols[0u], "de_insn", SYM_MODULE, &INST_de_insn);
  init_symbol(&symbols[1u], "de_rd", SYM_MODULE, &INST_de_rd);
  init_symbol(&symbols[2u], "de_rs1", SYM_MODULE, &INST_de_rs1);
  init_symbol(&symbols[3u], "de_rs2", SYM_MODULE, &INST_de_rs2);
  init_symbol(&symbols[4u], "decoder", SYM_MODULE, &INST_decoder);
  init_symbol(&symbols[5u], "RL_rl_opcode_test", SYM_RULE);
  init_symbol(&symbols[6u], "rg_insn", SYM_MODULE, &INST_rg_insn);
  init_symbol(&symbols[7u], "rg_testing_phase", SYM_MODULE, &INST_rg_testing_phase);
}


/* Rule actions */

void MOD_mkTestbench::RL_rl_opcode_test()
{
  tUInt8 DEF_NOT_0_CONCAT_decoder_decode_rg_insn_BITS_55_TO_ETC___d8;
  tUInt8 DEF_rg_testing_phase_EQ_1_0_AND_rg_insn_EQ_0x153F7_ETC___d48;
  tUInt8 DEF_rg_testing_phase_EQ_1_0_AND_NOT_0_CONCAT_decod_ETC___d45;
  tUInt8 DEF_rg_insn_ULE_0x87636313___d12;
  tUInt8 DEF_rg_testing_phase_EQ_2_1_AND_rg_insn_BITS_14_TO_ETC___d53;
  tUInt8 DEF_rg_testing_phase_EQ_2_1_AND_rg_insn_BITS_14_TO_ETC___d58;
  tUInt8 DEF_rg_testing_phase_EQ_2_1_AND_NOT_rg_insn_BITS_1_ETC___d65;
  tUInt8 DEF_rg_testing_phase_EQ_2_1_AND_NOT_rg_insn_ULE_0x_ETC___d68;
  tUInt8 DEF_rg_insn_BITS_14_TO_12_9_EQ_1___d50;
  tUInt8 DEF_rg_insn_BITS_14_TO_12_9_EQ_3___d57;
  tUInt8 DEF_rg_insn_BITS_14_TO_12_9_EQ_5___d51;
  tUInt8 DEF_rg_testing_phase_EQ_2___d11;
  tUInt32 DEF_IF_rg_testing_phase_EQ_1_0_THEN_IF_rg_insn_EQ__ETC___d22;
  tUInt32 DEF_x__h1345;
  tUInt32 DEF_IF_rg_testing_phase_EQ_1_0_THEN_IF_rg_insn_EQ__ETC___d19;
  tUInt32 DEF_IF_rg_testing_phase_EQ_1_0_THEN_IF_rg_insn_EQ__ETC___d26;
  tUInt8 DEF_rg_testing_phase_EQ_1___d10;
  tUInt32 DEF_IF_rg_testing_phase_EQ_1_0_THEN_IF_rg_insn_EQ__ETC___d30;
  tUInt32 DEF_de_rd_3_PLUS_2___d24;
  tUInt32 DEF_de_rs1_7_PLUS_1___d28;
  tUInt32 DEF_IF_rg_insn_EQ_0x153F733_5_THEN_0_ELSE_de_rs2_6_ETC___d47;
  tUInt32 DEF_de_insn_PLUS_1___d20;
  tUInt32 DEF_x__h1014;
  tUInt8 DEF_rg_insn_EQ_0x153F733___d15;
  tUInt8 DEF_decoder_decode_rg_insn_BITS_55_TO_52___d3;
  tUInt8 DEF_x_rd__h355;
  tUInt8 DEF_x_rs2__h354;
  tUInt8 DEF_x_rs1__h353;
  tUInt64 DEF_decoder_decode_rg_insn___d2;
  tUInt32 DEF_b__h364;
  tUInt32 DEF_signed_de_insn___d5;
  tUInt32 DEF_b__h544;
  tUInt32 DEF_signed_de_rd_3___d34;
  tUInt32 DEF_b__h547;
  tUInt32 DEF_signed_de_rs1_7___d35;
  tUInt32 DEF_b__h550;
  tUInt32 DEF_signed_de_rs2_6___d37;
  tUInt32 DEF_signed_decoder_decode_rg_insn_BITS_33_TO_2_4___d55;
  tUInt32 DEF_signed_0x16___d56;
  tUInt32 DEF_signed_0x876___d59;
  tUInt32 DEF_signed_0xFFFFF876___d66;
  tUInt32 DEF_b__h486;
  tUInt32 DEF_x__h1364;
  tUInt8 DEF_rg_testing_phase_EQ_1_0_OR_rg_testing_phase_EQ_ETC___d14;
  tUInt8 DEF_x__h693;
  DEF_x__h1364 = INST_rg_insn.METH_read();
  DEF_x__h693 = (tUInt8)((tUInt8)7u & (DEF_x__h1364 >> 12u));
  DEF_b__h486 = INST_rg_testing_phase.METH_read();
  DEF_signed_0xFFFFF876___d66 = 4294965366u;
  DEF_signed_0x16___d56 = 22u;
  DEF_signed_0x876___d59 = 2166u;
  DEF_b__h550 = INST_de_rs2.METH_read();
  DEF_signed_de_rs2_6___d37 = DEF_b__h550;
  DEF_b__h547 = INST_de_rs1.METH_read();
  DEF_signed_de_rs1_7___d35 = DEF_b__h547;
  DEF_b__h544 = INST_de_rd.METH_read();
  DEF_signed_de_rd_3___d34 = DEF_b__h544;
  DEF_b__h364 = INST_de_insn.METH_read();
  DEF_signed_de_insn___d5 = DEF_b__h364;
  DEF_decoder_decode_rg_insn___d2 = INST_decoder.METH_decode(DEF_x__h1364);
  DEF_signed_decoder_decode_rg_insn_BITS_33_TO_2_4___d55 = (tUInt32)(DEF_decoder_decode_rg_insn___d2 >> 2u);
  DEF_x_rs1__h353 = (tUInt8)((tUInt8)31u & (DEF_decoder_decode_rg_insn___d2 >> 44u));
  DEF_x_rs2__h354 = (tUInt8)((tUInt8)31u & (DEF_decoder_decode_rg_insn___d2 >> 39u));
  DEF_x_rd__h355 = (tUInt8)((tUInt8)31u & (DEF_decoder_decode_rg_insn___d2 >> 34u));
  DEF_decoder_decode_rg_insn_BITS_55_TO_52___d3 = (tUInt8)(DEF_decoder_decode_rg_insn___d2 >> 52u);
  DEF_x__h1014 = DEF_x__h1364 + 3182848u;
  DEF_rg_insn_EQ_0x153F733___d15 = DEF_x__h1364 == 22279987u;
  DEF_de_insn_PLUS_1___d20 = DEF_b__h364 + 1u;
  DEF_IF_rg_insn_EQ_0x153F733_5_THEN_0_ELSE_de_rs2_6_ETC___d47 = DEF_rg_insn_EQ_0x153F733___d15 ? 0u : DEF_b__h550 + 3u;
  DEF_de_rs1_7_PLUS_1___d28 = DEF_b__h547 + 1u;
  DEF_de_rd_3_PLUS_2___d24 = DEF_b__h544 + 2u;
  DEF_rg_testing_phase_EQ_1___d10 = DEF_b__h486 == 1u;
  DEF_IF_rg_testing_phase_EQ_1_0_THEN_IF_rg_insn_EQ__ETC___d30 = DEF_rg_testing_phase_EQ_1___d10 ? (DEF_rg_insn_EQ_0x153F733___d15 ? 0u : DEF_de_rs1_7_PLUS_1___d28) : DEF_de_rs1_7_PLUS_1___d28;
  DEF_IF_rg_testing_phase_EQ_1_0_THEN_IF_rg_insn_EQ__ETC___d26 = DEF_rg_testing_phase_EQ_1___d10 ? (DEF_rg_insn_EQ_0x153F733___d15 ? 0u : DEF_de_rd_3_PLUS_2___d24) : DEF_de_rd_3_PLUS_2___d24;
  DEF_x__h1345 = DEF_x__h1364 + 37120u;
  DEF_IF_rg_testing_phase_EQ_1_0_THEN_IF_rg_insn_EQ__ETC___d19 = DEF_rg_testing_phase_EQ_1___d10 ? (DEF_rg_insn_EQ_0x153F733___d15 ? 2271215635u : DEF_x__h1014) : DEF_x__h1345;
  DEF_IF_rg_testing_phase_EQ_1_0_THEN_IF_rg_insn_EQ__ETC___d22 = DEF_rg_testing_phase_EQ_1___d10 ? (DEF_rg_insn_EQ_0x153F733___d15 ? 1u : DEF_de_insn_PLUS_1___d20) : DEF_de_insn_PLUS_1___d20;
  DEF_rg_testing_phase_EQ_2___d11 = DEF_b__h486 == 2u;
  DEF_rg_insn_BITS_14_TO_12_9_EQ_5___d51 = DEF_x__h693 == (tUInt8)5u;
  DEF_rg_insn_BITS_14_TO_12_9_EQ_3___d57 = DEF_x__h693 == (tUInt8)3u;
  DEF_rg_insn_BITS_14_TO_12_9_EQ_1___d50 = DEF_x__h693 == (tUInt8)1u;
  DEF_rg_testing_phase_EQ_2_1_AND_NOT_rg_insn_BITS_1_ETC___d65 = DEF_rg_testing_phase_EQ_2___d11 && ((!DEF_rg_insn_BITS_14_TO_12_9_EQ_1___d50 && !DEF_rg_insn_BITS_14_TO_12_9_EQ_5___d51) && !DEF_rg_insn_BITS_14_TO_12_9_EQ_3___d57);
  DEF_rg_testing_phase_EQ_2_1_AND_rg_insn_BITS_14_TO_ETC___d58 = DEF_rg_testing_phase_EQ_2___d11 && DEF_rg_insn_BITS_14_TO_12_9_EQ_3___d57;
  DEF_rg_testing_phase_EQ_2_1_AND_rg_insn_BITS_14_TO_ETC___d53 = DEF_rg_testing_phase_EQ_2___d11 && (DEF_rg_insn_BITS_14_TO_12_9_EQ_1___d50 || DEF_rg_insn_BITS_14_TO_12_9_EQ_5___d51);
  DEF_rg_insn_ULE_0x87636313___d12 = DEF_x__h1364 <= 2271437587u;
  DEF_rg_testing_phase_EQ_1_0_OR_rg_testing_phase_EQ_ETC___d14 = DEF_rg_testing_phase_EQ_1___d10 || (DEF_rg_testing_phase_EQ_2___d11 && DEF_rg_insn_ULE_0x87636313___d12);
  DEF_rg_testing_phase_EQ_2_1_AND_NOT_rg_insn_ULE_0x_ETC___d68 = DEF_rg_testing_phase_EQ_2___d11 && !DEF_rg_insn_ULE_0x87636313___d12;
  DEF_rg_testing_phase_EQ_1_0_AND_NOT_0_CONCAT_decod_ETC___d45 = DEF_rg_testing_phase_EQ_1___d10 && (!(((tUInt32)(DEF_x_rd__h355)) == DEF_b__h544) || !(((tUInt32)(DEF_x_rs1__h353)) == DEF_b__h547));
  DEF_rg_testing_phase_EQ_1_0_AND_rg_insn_EQ_0x153F7_ETC___d48 = DEF_rg_testing_phase_EQ_1___d10 && DEF_rg_insn_EQ_0x153F733___d15;
  DEF_NOT_0_CONCAT_decoder_decode_rg_insn_BITS_55_TO_ETC___d8 = !(((tUInt32)(DEF_decoder_decode_rg_insn_BITS_55_TO_52___d3)) == DEF_b__h364);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,32", &__str_literal_1, DEF_x__h1364);
    dollar_display(sim_hdl,
		   this,
		   "s,4,-32",
		   &__str_literal_2,
		   DEF_decoder_decode_rg_insn_BITS_55_TO_52___d3,
		   DEF_signed_de_insn___d5);
    if (DEF_NOT_0_CONCAT_decoder_decode_rg_insn_BITS_55_TO_ETC___d8)
      dollar_display(sim_hdl, this, "s", &__str_literal_3);
    if (DEF_NOT_0_CONCAT_decoder_decode_rg_insn_BITS_55_TO_ETC___d8)
      dollar_finish(sim_hdl, "32", 1u);
  }
  if (DEF_rg_testing_phase_EQ_1_0_OR_rg_testing_phase_EQ_ETC___d14)
    INST_rg_insn.METH_write(DEF_IF_rg_testing_phase_EQ_1_0_THEN_IF_rg_insn_EQ__ETC___d19);
  if (DEF_rg_testing_phase_EQ_1_0_OR_rg_testing_phase_EQ_ETC___d14)
    INST_de_insn.METH_write(DEF_IF_rg_testing_phase_EQ_1_0_THEN_IF_rg_insn_EQ__ETC___d22);
  if (DEF_rg_testing_phase_EQ_1_0_OR_rg_testing_phase_EQ_ETC___d14)
    INST_de_rd.METH_write(DEF_IF_rg_testing_phase_EQ_1_0_THEN_IF_rg_insn_EQ__ETC___d26);
  if (DEF_rg_testing_phase_EQ_1_0_OR_rg_testing_phase_EQ_ETC___d14)
    INST_de_rs1.METH_write(DEF_IF_rg_testing_phase_EQ_1_0_THEN_IF_rg_insn_EQ__ETC___d30);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_rg_testing_phase_EQ_1___d10)
      dollar_display(sim_hdl,
		     this,
		     "s,5,5,5,-32,-32,-32",
		     &__str_literal_4,
		     DEF_x_rd__h355,
		     DEF_x_rs1__h353,
		     DEF_x_rs2__h354,
		     DEF_signed_de_rd_3___d34,
		     DEF_signed_de_rs1_7___d35,
		     DEF_signed_de_rs2_6___d37);
    if (DEF_rg_testing_phase_EQ_1_0_AND_NOT_0_CONCAT_decod_ETC___d45)
      dollar_display(sim_hdl, this, "s", &__str_literal_5);
    if (DEF_rg_testing_phase_EQ_1_0_AND_NOT_0_CONCAT_decod_ETC___d45)
      dollar_finish(sim_hdl, "32", 1u);
  }
  if (DEF_rg_testing_phase_EQ_1___d10)
    INST_de_rs2.METH_write(DEF_IF_rg_insn_EQ_0x153F733_5_THEN_0_ELSE_de_rs2_6_ETC___d47);
  if (DEF_rg_testing_phase_EQ_1_0_AND_rg_insn_EQ_0x153F7_ETC___d48)
    INST_rg_testing_phase.METH_write(2u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_rg_testing_phase_EQ_2_1_AND_rg_insn_BITS_14_TO_ETC___d53)
      dollar_display(sim_hdl,
		     this,
		     "s,5,5,-32,-32,-32,-32",
		     &__str_literal_6,
		     DEF_x_rd__h355,
		     DEF_x_rs1__h353,
		     DEF_signed_decoder_decode_rg_insn_BITS_33_TO_2_4___d55,
		     DEF_signed_de_rd_3___d34,
		     DEF_signed_de_rs1_7___d35,
		     DEF_signed_0x16___d56);
    if (DEF_rg_testing_phase_EQ_2_1_AND_rg_insn_BITS_14_TO_ETC___d58)
      dollar_display(sim_hdl,
		     this,
		     "s,5,5,-32,-32,-32,-32",
		     &__str_literal_6,
		     DEF_x_rd__h355,
		     DEF_x_rs1__h353,
		     DEF_signed_decoder_decode_rg_insn_BITS_33_TO_2_4___d55,
		     DEF_signed_de_rd_3___d34,
		     DEF_signed_de_rs1_7___d35,
		     DEF_signed_0x876___d59);
    if (DEF_rg_testing_phase_EQ_2_1_AND_NOT_rg_insn_BITS_1_ETC___d65)
      dollar_display(sim_hdl,
		     this,
		     "s,5,5,-32,-32,-32,-32",
		     &__str_literal_6,
		     DEF_x_rd__h355,
		     DEF_x_rs1__h353,
		     DEF_signed_decoder_decode_rg_insn_BITS_33_TO_2_4___d55,
		     DEF_signed_de_rd_3___d34,
		     DEF_signed_de_rs1_7___d35,
		     DEF_signed_0xFFFFF876___d66);
    if (DEF_rg_testing_phase_EQ_2_1_AND_NOT_rg_insn_ULE_0x_ETC___d68)
      dollar_finish(sim_hdl, "32", 1u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkTestbench::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_rg_testing_phase.reset_RST(ARG_rst_in);
  INST_rg_insn.reset_RST(ARG_rst_in);
  INST_decoder.reset_RST_N(ARG_rst_in);
  INST_de_rs2.reset_RST(ARG_rst_in);
  INST_de_rs1.reset_RST(ARG_rst_in);
  INST_de_rd.reset_RST(ARG_rst_in);
  INST_de_insn.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTestbench::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTestbench::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_de_insn.dump_state(indent + 2u);
  INST_de_rd.dump_state(indent + 2u);
  INST_de_rs1.dump_state(indent + 2u);
  INST_de_rs2.dump_state(indent + 2u);
  INST_decoder.dump_state(indent + 2u);
  INST_rg_insn.dump_state(indent + 2u);
  INST_rg_testing_phase.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTestbench::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 7u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  num = INST_de_insn.dump_VCD_defs(num);
  num = INST_de_rd.dump_VCD_defs(num);
  num = INST_de_rs1.dump_VCD_defs(num);
  num = INST_de_rs2.dump_VCD_defs(num);
  num = INST_rg_insn.dump_VCD_defs(num);
  num = INST_rg_testing_phase.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_decoder.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTestbench::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTestbench &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkTestbench::vcd_defs(tVCDDumpType dt, MOD_mkTestbench &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}

void MOD_mkTestbench::vcd_prims(tVCDDumpType dt, MOD_mkTestbench &backing)
{
  INST_de_insn.dump_VCD(dt, backing.INST_de_insn);
  INST_de_rd.dump_VCD(dt, backing.INST_de_rd);
  INST_de_rs1.dump_VCD(dt, backing.INST_de_rs1);
  INST_de_rs2.dump_VCD(dt, backing.INST_de_rs2);
  INST_rg_insn.dump_VCD(dt, backing.INST_rg_insn);
  INST_rg_testing_phase.dump_VCD(dt, backing.INST_rg_testing_phase);
}

void MOD_mkTestbench::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTestbench &backing)
{
  INST_decoder.dump_VCD(dt, levels, backing.INST_decoder);
}
